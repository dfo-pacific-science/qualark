{
	"name": "df_insert_sonor_counts",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_silver_didsonYYYY_csv",
						"type": "DatasetReference"
					},
					"name": "silverdidsonYYYYdata"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_proto_sonar_configurations",
						"type": "DatasetReference"
					},
					"name": "sqlprotosonarconfigdata"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_error_sink_bronze",
						"type": "DatasetReference"
					},
					"name": "storeinvalidsonorcountid"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_proto_sonar_counts",
						"type": "DatasetReference"
					},
					"name": "storesonorcounts"
				}
			],
			"transformations": [
				{
					"name": "filtervalidrows"
				},
				{
					"name": "lookupsonarconfigID"
				},
				{
					"name": "selectsonorconfigid"
				},
				{
					"name": "split1"
				},
				{
					"name": "renamecolumns"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "validationStep"
				},
				{
					"name": "derivedColumn2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     p_run_id as string (\"\"),",
				"     error_sink_filename as string (\"error_file.csv\")",
				"}",
				"source(output(",
				"          date as date,",
				"          count_hour as integer,",
				"          duration_minutes as integer,",
				"          up as integer,",
				"          down as integer,",
				"          net_up as integer,",
				"          salmon_per_hour as double,",
				"          comments as string,",
				"          system as string,",
				"          bank as string,",
				"          frequency_setting as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false) ~> silverdidsonYYYYdata",
				"source(output(",
				"          sonar_config_id as integer,",
				"          system as string,",
				"          bank as string,",
				"          frequency_setting as string,",
				"          comments as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sqlprotosonarconfigdata",
				"validationStep filter((\r",
				"    !isNull(date) &&\r",
				"    !isNull(toDate(toString(date), 'yyyy-MM-dd'))\r",
				") &&\r",
				"(\r",
				"    !isNull(count_hour) &&\r",
				"    toInteger(count_hour) >= 0 &&\r",
				"    toInteger(count_hour) <= 23\r",
				") &&\r",
				"(\r",
				"    !isNull(up) &&\r",
				"    toInteger(up) >= 0\r",
				") &&\r",
				"(\r",
				"    !isNull(down) &&\r",
				"    toInteger(down) >= 0\r",
				") && (\r",
				"    !isNull(duration_minutes) &&\r",
				"    toInteger(duration_minutes) > 0\r",
				")) ~> filtervalidrows",
				"filtervalidrows, sqlprotosonarconfigdata lookup(silverdidsonYYYYdata@system == sqlprotosonarconfigdata@system",
				"     && silverdidsonYYYYdata@bank == sqlprotosonarconfigdata@bank",
				"     && silverdidsonYYYYdata@frequency_setting == sqlprotosonarconfigdata@frequency_setting,",
				"     multiple: true,",
				"     broadcast: 'auto')~> lookupsonarconfigID",
				"lookupsonarconfigID select(mapColumn(",
				"          date,",
				"          count_hour,",
				"          duration_minutes,",
				"          up,",
				"          down,",
				"          net_up,",
				"          salmon_per_hour,",
				"          comments = silverdidsonYYYYdata@comments,",
				"          sonar_config_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectsonorconfigid",
				"selectsonorconfigid split(!isNull(sonar_config_id),",
				"     disjoint: false) ~> split1@(valid, invalid)",
				"split1@valid select(mapColumn(",
				"          sonar_config_id,",
				"          date,",
				"          count_hour,",
				"          duration_minutes,",
				"          up,",
				"          down,",
				"          net_up,",
				"          salmon_per_hour,",
				"          comments",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renamecolumns",
				"renamecolumns derive(current_date = fromUTC(currentUTC(),'PST'),",
				"          added_by = \"adfuser_qualark_proto\") ~> derivedColumn1",
				"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
				"silverdidsonYYYYdata derive(reason_code = iif(\r",
				"     isNull(date) || isNull(toDate(toString(date), 'yyyy-MM-dd')),\r",
				"     'Invalid or missing date',\r",
				"     iif(isNull(count_hour) || toInteger(count_hour) < 0 || toInteger(count_hour) > 23,\r",
				"       'Invalid count_hour',\r",
				"       iif(isNull(duration_minutes) || toInteger(duration_minutes) <= 0,\r",
				"         'Invalid duration_minutes',\r",
				"         'None'\r",
				"       )\r",
				"     )\r",
				"   ),",
				"          pipeline_run_id = $p_run_id) ~> validationStep",
				"split1@invalid derive(pipeline_id = $p_run_id,",
				"          error_type = \"invalid sonor config id\") ~> derivedColumn2",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:[($error_sink_filename)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> storeinvalidsonorcountid",
				"AlterRow1 sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          sonar_count_id as integer,",
				"          sonar_config_id as integer,",
				"          date as date,",
				"          count_hour as integer,",
				"          duration_minutes as integer,",
				"          up as integer,",
				"          down as integer,",
				"          net_up as integer,",
				"          salmon_per_hour as decimal(6,2),",
				"          comments as string,",
				"          created_at as timestamp,",
				"          updated_at as timestamp,",
				"          updated_by as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['date','count_hour','sonar_config_id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          sonar_config_id,",
				"          date,",
				"          count_hour,",
				"          duration_minutes,",
				"          up,",
				"          down,",
				"          net_up,",
				"          salmon_per_hour,",
				"          comments,",
				"          created_at = current_date,",
				"          updated_by = added_by",
				"     )) ~> storesonorcounts"
			]
		}
	}
}